{"ast":null,"code":"var _jsxFileName = \"/Users/parth/Documents/GitHub/clicky/src/Components/UploadPics.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { storage, db, timestamp } from '../firebase/config';\nimport ImageGrid from './ImageGrid';\nimport ProgressBar from './ProgressBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UploadPics = () => {\n  _s();\n\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState('');\n\n  const onChangeHandler = e => {\n    const types = ['image/png', 'image/jpeg'];\n    const file = e.target.files[0];\n    const imageCollection = db.collection('imgURLs');\n\n    if (file && types.includes(file.type)) {\n      const upload = storage.ref(`images/${file.name}`).put(file);\n      upload.on(\"state_changed\", snap => {\n        const progress = Math.round(snap.bytesTransferred / snap.totalBytes * 100);\n        setProgress(progress);\n      }, error => {\n        setError(error);\n      }, () => {\n        storage.ref('images').child(file.name).getDownloadURL().then(url => {\n          imageCollection.add({\n            url: url,\n            createdAt: timestamp\n          });\n          setError('');\n        });\n      });\n    } else {\n      setError('Invalid format');\n    }\n\n    return error, progress;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"clicky\", /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: \"deeppink\"\n        },\n        children: \".\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add yours\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"upload\",\n        onChange: onChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"upload\",\n        className: \"label-btn\",\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ImageGrid, {\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), progress !== 100 && /*#__PURE__*/_jsxDEV(ProgressBar, {\n      progress: progress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 34\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UploadPics, \"IDA0AOihSFnWDTQ8ZJhe9aPVudA=\");\n\n_c = UploadPics;\nexport default UploadPics;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadPics\");","map":{"version":3,"sources":["/Users/parth/Documents/GitHub/clicky/src/Components/UploadPics.js"],"names":["React","useState","storage","db","timestamp","ImageGrid","ProgressBar","UploadPics","progress","setProgress","error","setError","onChangeHandler","e","types","file","target","files","imageCollection","collection","includes","type","upload","ref","name","put","on","snap","Math","round","bytesTransferred","totalBytes","child","getDownloadURL","then","url","add","createdAt","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { storage, db, timestamp } from '../firebase/config'\nimport ImageGrid from './ImageGrid'\nimport ProgressBar from './ProgressBar'\n\nconst UploadPics = () => {\n\n    const [progress, setProgress] = useState(0)\n    const [error, setError] = useState('')\n\n    const onChangeHandler = (e) => {\n\n        const types = ['image/png', 'image/jpeg']\n\n        const file = e.target.files[0]\n\n        const imageCollection = db.collection('imgURLs')\n\n        if (file && types.includes(file.type)) {\n            const upload = storage.ref(`images/${file.name}`).put(file)\n            upload.on(\"state_changed\",\n                snap => {\n                    const progress = (Math.round((snap.bytesTransferred / snap.totalBytes) * 100))\n                    setProgress(progress)\n\n                },\n                error => {\n                    setError(error)\n                },\n                () => {\n                    storage.ref('images')\n                        .child(file.name)\n                        .getDownloadURL()\n                        .then(url => {\n                            imageCollection.add({\n                                url: url,\n                                createdAt: timestamp\n                            })\n                            \n                            setError('')\n                        })\n                })\n        } else {\n            setError('Invalid format')\n        }\n        return (error, progress)\n\n    }\n\n    return (\n\n\n        <div>\n            <h1>clicky<span style={{ color: \"deeppink\" }}>.</span></h1>\n            <div className=\"input-div\">\n                <h2>Add yours</h2>\n                <input type=\"file\" id=\"upload\" onChange={onChangeHandler} />\n                <label htmlFor=\"upload\" className=\"label-btn\">+</label>\n\n                <ImageGrid error={error} />\n            </div>\n            {progress !== 100 && <ProgressBar progress={progress} />}\n        </div>\n    )\n}\n\nexport default UploadPics\n"]},"metadata":{},"sourceType":"module"}